ورژن 1


|=== فایل connectionString ===| :
برای اتصال به دیتابیس sqllite3 استفاده از

/*** DB_Provider کلاس ***/
1- اتصال به دیتابیس موجود در دایرکتوری در متد سازنده
----------------------------------------------------
2 - جهت اجرا کوئری ها EXCUTE متد 
----------------------------------------------------
3 - جهت ثبت کوئری های تغییر دهنده بانک اطلاعاتی COMMIT متد
(افزودن ، حدف و آپدیت کردن)
----------------------------------------------------
4 - جهت نمایش کوئری ها از بانک اطلاعاتی  GET متد
(دریافت اطلاعات)

-----------------------------------------------------------
"|"|"|"||"||"||"||"||"||"||"||"||"||"||"||"||"||"||"||"||"|
-----------------------------------------------------------


|=== فایل sql_command ===| 

/*** mySQL کلاس ***/
در تمامی متد های آن میباشد sql این کلاس حاوی دستورات
و تنها دستورات را برمیگرداند

1 - در متد سازنده ، نام جدول موجود در بانک را در آرگومان اول + عنوان ستون های بانک را به صورت تاپل دریافت میکند
* مثال => mySQL("rigister" , ("UserName" , "Password",))
----------------------------------------------------
2 - INSEART متد :
داده های دلخواه جهت نسبت  آنها به عنوان ستون های دریافت شده
(هنگام نمونه سازی از کلاس)
دریافت میشود (*arg) و افزودن آن به بانک اطلاعاتی به صورت 
* مثال => mySQL("rigister" , ("UserName" , "Password",)).INSEART("amir","123abc")
: sql خروجی این دستور به صورت
INSERT INTO rigister ("UserName" , "Password") VALUES ("amir","123abc")
----------------------------------------------------
3 - Update متد :
آرگومان اول آیدی شخص دریافت میشود و آرگومان دوم
داده های دلخواه جهت نسبت  آنها به عنوان ستون های دریافت شده
(هنگام نمونه سازی از کلاس)
دریافت میشود (*arg) و افزودن آن به بانک اطلاعاتی به صورت

در سی کو ئل  Update تذکر : با توجه به نوع دستور
به وسیله حلقه ، عنوان ستون های وارد شده و داده های وارد شده به ترتیب به صورت
"عنوان" = "داده"
درون یک لیست وارد میشوند و سپس به رشته تبدیل میشوند
* مثال => mySQL("rigister" , ("UserName" , "Password",)).UPDATE(3,"majid","0909")
: sql خروجی این دستور به صورت
UPDATE rigister SET UserName = 'majid' , Password = '0909' WHERE ID = 3
----------------------------------------------------
4 - عملکرد سایر متد ها همانند دو نمونه ذکر شده میباشد
----------------------------------------------------
5 - GetCustom متد :
این متد جهت نمایش داده های موجود در جدول دلخواه به صورت سفارشی ترین حالت ممکن میباشد
(انتخاب عنوان های دریافتی به صورت دلخواه)
(افزودن مقادیر وارد شده جهت فیلتر کردن به صورت دلخواه)

استفاده شده **keyArgs به دلیل ارسال مقادیر دلخواه جهت فیلتر کردن از 
سپس تمامی کلید ها و مقادیر به وسیله یک حلقه درون یک رشته قرار میگیرند
{متغیر searchBy}

همچنین عنوان های ارسال شده حین نمونه سازی واکشی شده و به صورت رشته تبدیل میشوند
{متغیر text}

*مثال : 
mySQL('rigister',('Email',)).GetCustom(UserName = 'ali')
خروجی :
SELECT Email FROM rigister WHERE UserName = 'ali'

-----------------------------------------------------------
"|"|"|"||"||"||"||"||"||"||"||"||"||"||"||"||"||"||"||"||"|
-----------------------------------------------------------

|=== فایل context ===| 
|=== پوشه UnitOfWork ===| 

/*** Context کلاس ***/
جهت برقراری ارتباط بین دستورات سی کو ئل و بانک اطلاعاتی دلخواه
و همچنین سهولت استفاده از بانک و دستورات در سایر بخش های برنامه 
این کلاس ساخته شده

(بحث تزریق وابستگی رعایت شده به این صورت که حین نمونه سازی ، بانک اطلاعاتی به سازنده تابع ارسال میشود و تنها یک درگاه جهت باز کردن بانک اطلاعاتی باز میشود)

1- دسترسی داشت DB_Provider از طریق سازنده میتوان به متد های تابع
2- جهت ارسال نام جدول و ارسال عناوین جدول SQL تابع 
میباشد *arg به صورت 
تذکر : این اطلاعات به صورت خودکار به نسخه نمونه سازی شده از 
ارسال میشود mySQL کلاس

-----------------------------------------------------------
"|"|"|"||"||"||"||"||"||"||"||"||"||"||"||"||"||"||"||"||"|
-----------------------------------------------------------
